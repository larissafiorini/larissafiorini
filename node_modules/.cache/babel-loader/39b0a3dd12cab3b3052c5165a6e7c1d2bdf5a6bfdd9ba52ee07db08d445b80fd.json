{"ast":null,"code":"\"use client\";\n\nimport * as o from \"react\";\nimport C from \"classnames\";\nimport { createContextScope as y } from \"@radix-ui/react-context\";\nimport * as i from \"./checkbox-group.primitive.js\";\nimport { createCheckboxGroupScope as n } from \"./checkbox-group.primitive.js\";\nimport { checkboxGroupRootPropDefs as x } from \"./checkbox-group.props.js\";\nimport { ThickCheckIcon as R } from \"./icons.js\";\nimport { Text as v } from \"./text.js\";\nimport { extractProps as a } from \"../helpers/extract-props.js\";\nimport { marginPropDefs as k } from \"../props/margin.props.js\";\nconst b = \"CheckboxGroup\",\n  [N] = y(b, [n]),\n  G = n(),\n  [E, P] = N(b),\n  f = o.forwardRef((_ref, m) => {\n    let {\n      color: s = x.color.default,\n      highContrast: e = x.highContrast.default,\n      size: r = x.size.default,\n      variant: t = x.variant.default,\n      ...p\n    } = _ref;\n    const {\n        __scopeCheckboxGroup: c,\n        className: h,\n        ...I\n      } = a(p, k),\n      d = G(c);\n    return o.createElement(E, {\n      scope: c,\n      color: s,\n      size: r,\n      highContrast: e,\n      variant: t\n    }, o.createElement(i.Root, {\n      ...d,\n      ...I,\n      ref: m,\n      className: C(\"rt-CheckboxGroupRoot\", h)\n    }));\n  });\nf.displayName = \"CheckboxGroup.Root\";\nconst l = o.forwardRef((s, e) => {\n  const {\n      __scopeCheckboxGroup: r,\n      children: t,\n      className: p,\n      style: m,\n      ...c\n    } = s,\n    {\n      size: h\n    } = P(\"CheckboxGroupItem\", r);\n  return t ? o.createElement(v, {\n    as: \"label\",\n    size: h,\n    className: C(\"rt-CheckboxGroupItem\", p),\n    style: m\n  }, o.createElement(u, {\n    __scopeCheckboxGroup: r,\n    ...c,\n    ref: e\n  }), t && o.createElement(\"span\", {\n    className: \"rt-CheckboxGroupItemInner\"\n  }, t)) : o.createElement(u, {\n    __scopeCheckboxGroup: r,\n    ...c,\n    ref: e,\n    className: p,\n    style: m\n  });\n});\nl.displayName = \"CheckboxGroup.Item\";\nconst u = o.forwardRef((_ref2, r) => {\n  let {\n    __scopeCheckboxGroup: s,\n    ...e\n  } = _ref2;\n  const t = P(\"CheckboxGroupItemCheckbox\", s),\n    p = G(s),\n    {\n      color: m,\n      className: c\n    } = a({\n      ...e,\n      ...t\n    }, x, k);\n  return o.createElement(i.Item, {\n    ...p,\n    \"data-accent-color\": m,\n    ...e,\n    ref: r,\n    className: C(\"rt-reset\", \"rt-BaseCheckboxRoot\", \"rt-CheckboxGroupItemCheckbox\", c)\n  }, o.createElement(i.Indicator, {\n    ...p,\n    asChild: !0,\n    className: \"rt-BaseCheckboxIndicator\"\n  }, o.createElement(R, null)));\n});\nu.displayName = \"CheckboxGroup.ItemCheckbox\";\nexport { l as Item, f as Root };","map":{"version":3,"names":["o","C","createContextScope","y","i","createCheckboxGroupScope","n","checkboxGroupRootPropDefs","x","ThickCheckIcon","R","Text","v","extractProps","a","marginPropDefs","k","b","N","G","E","P","f","forwardRef","_ref","m","color","s","default","highContrast","e","size","r","variant","t","p","__scopeCheckboxGroup","c","className","h","I","d","createElement","scope","Root","ref","displayName","l","children","style","as","u","_ref2","Item","Indicator","asChild"],"sources":["/home/larissa/Documentos/ghpages/larissafiorini/larissafiorini/node_modules/@radix-ui/themes/src/components/checkbox-group.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { createContextScope } from '@radix-ui/react-context';\n\nimport * as CheckboxGroupPrimitive from './checkbox-group.primitive.js';\nimport { createCheckboxGroupScope } from './checkbox-group.primitive.js';\nimport { checkboxGroupRootPropDefs } from './checkbox-group.props.js';\nimport { ThickCheckIcon } from './icons.js';\nimport { Text } from './text.js';\nimport { extractProps } from '../helpers/extract-props.js';\nimport { marginPropDefs } from '../props/margin.props.js';\n\nimport type { Scope } from '@radix-ui/react-context';\nimport type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';\nimport type { MarginProps } from '../props/margin.props.js';\nimport type { GetPropDefTypes } from '../props/prop-def.js';\n\nconst CHECKBOX_GROUP_NAME = 'CheckboxGroup';\n\ntype ScopedProps<P> = P & { __scopeCheckboxGroup?: Scope };\nconst [createCheckboxGroupContext] = createContextScope(CHECKBOX_GROUP_NAME, [\n  createCheckboxGroupScope,\n]);\nconst useCheckboxGroupScope = createCheckboxGroupScope();\n\ntype CheckboxGroupRootOwnProps = GetPropDefTypes<typeof checkboxGroupRootPropDefs>;\ntype CheckboxGroupContextValue = CheckboxGroupRootOwnProps;\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] =\n  createCheckboxGroupContext<CheckboxGroupContextValue>(CHECKBOX_GROUP_NAME);\n\ntype CheckboxGroupRootElement = React.ElementRef<typeof CheckboxGroupPrimitive.Root>;\ninterface CheckboxGroupRootProps\n  extends ComponentPropsWithout<\n      typeof CheckboxGroupPrimitive.Root,\n      'asChild' | 'color' | 'defaultChecked'\n    >,\n    MarginProps,\n    CheckboxGroupRootOwnProps {}\nconst CheckboxGroupRoot = React.forwardRef<CheckboxGroupRootElement, CheckboxGroupRootProps>(\n  (\n    {\n      color = checkboxGroupRootPropDefs.color.default,\n      highContrast = checkboxGroupRootPropDefs.highContrast.default,\n      size = checkboxGroupRootPropDefs.size.default,\n      variant = checkboxGroupRootPropDefs.variant.default,\n      ...props\n    }: ScopedProps<CheckboxGroupRootProps>,\n    forwardedRef\n  ) => {\n    const { __scopeCheckboxGroup, className, ...rootProps } = extractProps(props, marginPropDefs);\n    const checkboxGroupScope = useCheckboxGroupScope(__scopeCheckboxGroup);\n    return (\n      <CheckboxGroupProvider\n        scope={__scopeCheckboxGroup}\n        color={color}\n        size={size}\n        highContrast={highContrast}\n        variant={variant}\n      >\n        <CheckboxGroupPrimitive.Root\n          {...checkboxGroupScope}\n          {...rootProps}\n          ref={forwardedRef}\n          className={classNames('rt-CheckboxGroupRoot', className)}\n        />\n      </CheckboxGroupProvider>\n    );\n  }\n);\nCheckboxGroupRoot.displayName = 'CheckboxGroup.Root';\n\ntype CheckboxGroupItemElement = React.ElementRef<typeof CheckboxGroupPrimitive.Item>;\ninterface CheckboxGroupItemProps\n  extends ComponentPropsWithout<typeof CheckboxGroupPrimitive.Item, RemovedProps>,\n    MarginProps {}\nconst CheckboxGroupItem = React.forwardRef<CheckboxGroupItemElement, CheckboxGroupItemProps>(\n  (_props: ScopedProps<CheckboxGroupItemProps>, forwardedRef) => {\n    const { __scopeCheckboxGroup, children, className, style, ...props } = _props;\n    const { size } = useCheckboxGroupContext('CheckboxGroupItem', __scopeCheckboxGroup);\n\n    // Render `<Text as=\"label\">` if childrenÂ are provided, otherwise render\n    // the solo checkbox to allow building out your custom layouts with it.\n    if (children) {\n      return (\n        <Text\n          as=\"label\"\n          size={size}\n          className={classNames('rt-CheckboxGroupItem', className)}\n          style={style}\n        >\n          <CheckboxGroupItemCheckbox\n            __scopeCheckboxGroup={__scopeCheckboxGroup}\n            {...props}\n            ref={forwardedRef}\n          />\n          {children && <span className=\"rt-CheckboxGroupItemInner\">{children}</span>}\n        </Text>\n      );\n    }\n\n    return (\n      <CheckboxGroupItemCheckbox\n        __scopeCheckboxGroup={__scopeCheckboxGroup}\n        {...props}\n        ref={forwardedRef}\n        className={className}\n        style={style}\n      />\n    );\n  }\n);\nCheckboxGroupItem.displayName = 'CheckboxGroup.Item';\n\ntype CheckboxGroupItemCheckboxElement = React.ElementRef<typeof CheckboxGroupPrimitive.Item>;\ninterface CheckboxGroupItemCheckboxProps\n  extends ComponentPropsWithout<typeof CheckboxGroupPrimitive.Item, RemovedProps> {}\nconst CheckboxGroupItemCheckbox = React.forwardRef<\n  CheckboxGroupItemCheckboxElement,\n  ScopedProps<CheckboxGroupItemCheckboxProps>\n>(({ __scopeCheckboxGroup, ...props }, forwardedRef) => {\n  const context = useCheckboxGroupContext('CheckboxGroupItemCheckbox', __scopeCheckboxGroup);\n  const checkboxGroupScope = useCheckboxGroupScope(__scopeCheckboxGroup);\n  const { color, className } = extractProps(\n    { ...props, ...context },\n    checkboxGroupRootPropDefs,\n    marginPropDefs\n  );\n  return (\n    <CheckboxGroupPrimitive.Item\n      {...checkboxGroupScope}\n      data-accent-color={color}\n      {...props}\n      ref={forwardedRef}\n      className={classNames(\n        'rt-reset',\n        'rt-BaseCheckboxRoot',\n        'rt-CheckboxGroupItemCheckbox',\n        className\n      )}\n    >\n      <CheckboxGroupPrimitive.Indicator\n        {...checkboxGroupScope}\n        asChild\n        className=\"rt-BaseCheckboxIndicator\"\n      >\n        <ThickCheckIcon />\n      </CheckboxGroupPrimitive.Indicator>\n    </CheckboxGroupPrimitive.Item>\n  );\n});\nCheckboxGroupItemCheckbox.displayName = 'CheckboxGroup.ItemCheckbox';\n\nexport { CheckboxGroupRoot as Root, CheckboxGroupItem as Item };\nexport type { CheckboxGroupRootProps as RootProps, CheckboxGroupItemProps as ItemProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}